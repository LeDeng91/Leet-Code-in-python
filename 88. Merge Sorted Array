Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        
        while m > 0 and n > 0:
            
            if nums1[m-1] > nums2[n-1]:
                nums1[m+n-1] = nums1[m-1]
                m -= 1
            else: 
                nums1[m+n-1] = nums2[n-1]
                n -= 1

        if n > 0:
            
            nums1[:n] = nums2[:n]
            
  """
  explanation:
  let's take another instance to walk through the code:
  nums1=[5,9,20,X,X,X,X](X doesn't count for the length)    m=3
  nums2=[1,2,3,7]                                           n=4
  
  step 1:
  nums1[2] > nums2[3]    (20>7)    =============>   nums1[6]=20        status check=================> nums1=[5,9,20,X,X,X,20], m=2, n=4
  step 2:
  nums1[1] > nums2[3]    (9>7)     =============>   nums1[5]=9        status check=================> nums1=[5,9,20,X,X,9,20], m=1, n=4
  step 3:
  nums1[0] < nums2[3]    (5<7)     =============>   nums1[4]=7        status check=================> nums1=[5,9,20,X,7,9,20], m=1, n=3 <========
  step 4:
  nums1[0] > nums2[2]    (5>3)     =============>   nums1[3]=5        status check=================> nums1=[5,9,20,5,7,9,20], m=0, n=3
  step 5:
  m is already 0, then: nums1[:3] = nums2[:3]      status check=================> nums1=[1,2,3,5,7,9,20], m=0, n=3
  
  Done!
  So to recap intuitively:
  you have two backets of apples with different sizes, and you want to sort them in the ascending order in the first backet.
  you compare everytime the last apple of the two backets, and put the bigger one in the current last slot in the backet.
  The logic is just that easy.
  However, in the programming, the trick here is the manipulate the indices neat.
  Every time after u put a apple in the current last slot, the total count(m+n) will be reduced by 1. It either comes from the backet 1, or 2
  So, if the last apple u put in the last plot comes from backet 1, then u let m-1
  If the apple comes from backet 2, then u let n-1
  This step allows me everytime to compare the 2 biggest apples which left in my 2 backets.
  If u realize at the end, that there're still apples in backet 2 while the apples in backet 1 are already sorted,
  it means that the biggest apple now in the backet 1 is smaller than all of the apples originally in backet 1(because u keep compare it with the apples in backet 1 and they are 
  all bigger than this one in backet 2, so it gets stucked)
  So u just put the left apples in backet 2 into the backet 1 in the order as they always are.
  
  
  
