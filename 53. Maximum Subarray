Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Max = nums[0]
        Min = 0
        summe = 0
        for i in range(len(nums)):
            summe += nums[i]
            Max = max(Max, summe - Min)
            Min = min(Min, summe)
            
        return Max
        
"""
explanation:
At first, we calculate an accumulated sum called 'summe'(that's sum in german) for every single element. That being said, for element i, we calculate summe from 0 to i.
Then, we try to find the largst sum by doing following:

1. find a Min set. Why we need it? Because the 'summe' we have is not the largst sum. The way we calculate is,  we start from the beginning of the array and then iterate.
   Imagine u have -100 as the first element. Won't that be nice if we get rid of it? So, we initialize the sum by giving it a 0, and then compare it with every 'summe' for the 
   new iterated element. Now, let me explain the logic by giving another instance: if the first three elements are -100, 80, -100. For the first iteration, we get -100 as the 'summe', which 
   is smaller than 0. So the Min is 0. Than, for the 2nd Iteration, the 'summe' is -20, but hi, 80 is great! So if u remove the Min(which is -100), then we get the largst 
   sum(for the Max I'll explain in step 2)! Then Let's look at the 3rd element, emmmmm...so bad. With another -100 the 'summe' is a negative number again! So, the new Min is -120
   , but regarding to the logic(order) of the code, the indice has already reached the max range. So it won't change the Max(come back to see the last sentence after you read 
   step 2).
   
 2.find a Max set. It's actually easy. The first Max will be calculated through 'summe' minus Min. Everytime u calculate a 'summe' for new element, come back and compare it to the 
   previous Max. Take the bigger one, cause, just like the example in step 1, if we have a -100, we certainly don't want it to be in our Max. So we just take the previous Max. 
   
   That's the answer. Actually i find this approach, somehow, not very clear at first glance. It's just like a MECE in consulting. When I think through this approach I just keep asking 
   myself, does this approach really cover all the situations? I gave a little effort to test the approach and find it actually works. So, respect to the author.
   
