"""
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

"""
class Solution(object):
    
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        
        """
        
        mapping = {}
        
        for index, val in enumerate(nums):
            
            diff = target - val
            if diff in mapping:
                return [mapping[diff],index]
            else:
                mapping[val] = index
"""
explanation:
for nums = [2,7,11,15] and the enumerate, there are: 
index:     value:
0          2
1          7
2          11
3          15

for the 1st round in loop(element "2" in nums):
diff=9-2=7
7 not in mapping
add 7 in mapping. mapping now looks like: mapping={2:0}

for the second round in loop(element "7" in nums):
diff=9-7=2
2 is in mapping!! So it means that the diff also exists as an element in the nums
so print out the index of this diff in nums(which is 0) and the index of the current element in nums(which is 1)
you can also switch the order of output but then the order of indices will be descending.

"""

